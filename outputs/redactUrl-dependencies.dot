digraph configDependents {
  rankdir=LR;
  node [shape=box]
  "BrowserProxy" -> "BrowserProxy"
  "DevToolsProtocolDriver" -> "BrowserProxy"
  "DevToolsProtocolDriver" -> "DevToolsProtocolDriver"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-browser/tab-manager.ts" -> "DevToolsProtocolDriver"
  "ForwardProxy" -> "ForwardProxy"
  "DevToolsProtocolDriver" -> "ForwardProxy"
  "SeleniumWebDriver" -> "ForwardProxy"
  "Health" -> "Health"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/health/index.ts" -> "Health"
  "Worker" -> "Health"
  "RequestStore" -> "RequestStore"
  "waitForFrameReady" -> "RequestStore"
  "BrowserProxy" -> "RequestStore"
  "SeleniumWebDriver" -> "SeleniumWebDriver"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-browser/tab-manager.ts" -> "SeleniumWebDriver"
  "TestRunner" -> "TestRunner"
  "runTest" -> "TestRunner"
  "Worker" -> "Worker"
  "spawnWorker" -> "Worker"
  "main" -> "Worker"
  "newWorkerFromQueue" -> "Worker"
  "doSteps" -> "doStep"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-multi/index.ts" -> "doStep"
  "runMultiTest" -> "doSteps"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-multi/index.ts" -> "doSteps"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-tests/do-test.ts" -> "doTest"
  "newWorkerFromQueue" -> "doTest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/cli/start-worker.ts" -> "main"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-api/entrypoint.ts" -> "makeAPIRequest"
  "doTest" -> "makeAPIRequest"
  "performSingleHealthCheck" -> "makeAPIRequest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-browser/entrypoint.ts" -> "makeBrowserRequestForBrowserTest"
  "makeBrowserRequestForBrowserTest" -> "makeBrowserRequestForBrowserTest"
  "main" -> "newWorkerFromQueue"
  "runHttpRequestUnsafe" -> "onError"
  "Health" -> "performSingleHealthCheck"
  "ping" -> "ping"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/cli/ping.ts" -> "ping"
  "pingApi" -> "pingApi"
  "ping" -> "pingApi"
  "pingBrowsers" -> "pingBrowsers"
  "ping" -> "pingBrowsers"
  "SeleniumWebDriver" -> "recursivelyFocusFrame"
  "recursivelyFocusFrame" -> "recursivelyFocusFrame"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/logger.ts" -> "redactUrl"
  "runHttpRequest" -> "redactUrl"
  "onError" -> "redactUrl"
  "ForwardProxy" -> "redactUrl"
  "runWebsocketRequest" -> "redactUrl"
  "doSteps" -> "redactUrl"
  "RequestStore" -> "redactUrl"
  "DevToolsProtocolDriver" -> "redactUrl"
  "SeleniumWebDriver" -> "redactUrl"
  "recursivelyFocusFrame" -> "redactUrl"
  "TestRunner" -> "redactUrl"
  "doStep" -> "retryStep"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-multi/index.ts" -> "retryStep"
  "retryStep" -> "retryStep"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-http/http-request.ts" -> "runHttpRequest"
  "runHttpTest" -> "runHttpRequest"
  "runMultiRequest" -> "runHttpRequest"
  "TestRunner" -> "runHttpRequest"
  "pingApi" -> "runHttpRequest"
  "runHttpRequest" -> "runHttpRequestUnsafe"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-http/index.ts" -> "runHttpTest"
  "makeAPIRequest" -> "runHttpTest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-multi/multi-request.ts" -> "runMultiRequest"
  "retryStep" -> "runMultiRequest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-multi/index.ts" -> "runMultiTest"
  "makeAPIRequest" -> "runMultiTest"
  "runTest" -> "runTest"
  "makeBrowserRequestForBrowserTest" -> "runTest"
  "pingBrowsers" -> "runTest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-websocket/websocket-request.ts" -> "runWebsocketRequest"
  "runWebsocketTest" -> "runWebsocketRequest"
  "runMultiRequest" -> "runWebsocketRequest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-websocket/index.ts" -> "runWebsocketTest"
  "makeAPIRequest" -> "runWebsocketTest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/cli/start-worker.ts" -> "spawnWorker"
  "main" -> "spawnWorker"
  "waitForFrameReady" -> "waitForFrameReady"
  "BrowserProxy" -> "waitForFrameReady"
}