digraph configDependents {
  rankdir=LR;
  node [shape=box]
  "Health" -> "Health"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/health/index.ts" -> "Health"
  "Worker" -> "Health"
  "ResultEmitter" -> "ResultEmitter"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/worker/types.ts" -> "ResultEmitter"
  "makeBrowserRequest" -> "ResultEmitter"
  "makeBrowserRequestForBrowserTest" -> "ResultEmitter"
  "makeAPIRequest" -> "ResultEmitter"
  "doTest" -> "ResultEmitter"
  "discardInvalidRequest" -> "ResultEmitter"
  "performSingleHealthCheck" -> "ResultEmitter"
  "Worker" -> "ResultEmitter"
  "Worker" -> "Worker"
  "spawnWorker" -> "Worker"
  "main" -> "Worker"
  "newWorkerFromQueue" -> "Worker"
  "doTest" -> "discardInvalidRequest"
  "discardInvalidRequest" -> "discardInvalidRequest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-tests/do-test.ts" -> "doTest"
  "newWorkerFromQueue" -> "doTest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-tests/test-encryption.ts" -> "encryptResult"
  "ResultEmitter" -> "encryptResult"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/cli/start-worker.ts" -> "main"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-api/entrypoint.ts" -> "makeAPIRequest"
  "doTest" -> "makeAPIRequest"
  "performSingleHealthCheck" -> "makeAPIRequest"
  "makeBrowserRequest" -> "makeBrowserRequest"
  "doTest" -> "makeBrowserRequest"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/synthetics-browser/entrypoint.ts" -> "makeBrowserRequestForBrowserTest"
  "makeBrowserRequestForBrowserTest" -> "makeBrowserRequestForBrowserTest"
  "main" -> "newWorkerFromQueue"
  "Health" -> "performSingleHealthCheck"
  "/Users/etienne.brodu/dd/synthetics-worker/worker/src/cli/start-worker.ts" -> "spawnWorker"
  "main" -> "spawnWorker"
}