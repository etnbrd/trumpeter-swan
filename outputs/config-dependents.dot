digraph configDependents {
  rankdir=LR;
  node [shape=box]
  "worker/src/config/config.ts" -> "config"
  "getFirewallRulesFromConfig" -> "config"
  "getDomainFilterRegexes" -> "config"
  "dumpConfigIfNeeded" -> "config"
  "getFileTransport" -> "config"
  "redactUrl" -> "config"
  "worker/src/logger.ts" -> "config"
  "enableLoggerPrettyPrinting" -> "config"
  "worker/src/config/index.ts" -> "config"
  "getDatadogHost" -> "config"
  "getDatadogProfileIntakeHost" -> "config"
  "getPublicKey" -> "config"
  "worker/src/dogstatsd.ts" -> "config"
  "shouldUseStatsD" -> "config"
  "worker/src/dns.ts" -> "config"
  "getResolveFunction" -> "config"
  "dnsLookup" -> "config"
  "dnsLookupWithDefaultParameters" -> "config"
  "validateIPAddress" -> "config"
  "getSigV1AuthHeaders" -> "config"
  "getApiKeyAuthHeaders" -> "config"
  "worker/src/lib/datadog-intake.ts" -> "config"
  "makeHttpRequestToDatadogWithRetry" -> "config"
  "worker/src/tracer.ts" -> "config"
  "ASBQueue" -> "config"
  "SQSQueue" -> "config"
  "hasFeature" -> "config"
  "regexScript" -> "config"
  "runDNSRequest" -> "config"
  "extractValues" -> "config"
  "extractValue" -> "config"
  "Tunnel" -> "config"
  "transformBody" -> "config"
  "runHttpRequest" -> "config"
  "runHttpRequestUnsafe" -> "config"
  "extractValuesIfNeeded" -> "config"
  "runICMPRequest" -> "config"
  "MetricsReporter" -> "config"
  "runRequest" -> "config"
  "runTCPRequest" -> "config"
  "performOneTcpRequest" -> "config"
  "runWebsocketRequest" -> "config"
  "performWebsocketRequest" -> "config"
  "cleanSingleAPIResult" -> "config"
  "ResultEmitter" -> "config"
  "getBrowserSettings" -> "config"
  "validateTest" -> "config"
  "getTestFromRequest" -> "config"
  "makeBrowserRequest" -> "config"
  "runUDPRequest" -> "config"
  "performUdpRequest" -> "config"
  "reportInvalidRouting" -> "config"
  "Health" -> "config"
  "Pusher" -> "config"
  "Worker" -> "config"
  "getQueue" -> "config"
  "main" -> "config"
  "tryStatsDConnection" -> "config"
  "builderByBrowser" -> "config"
  "worker/src/config/config.ts" -> "getFirewallRulesFromConfig"
  "getFirewallRulesPerSubnet" -> "getFirewallRulesFromConfig"
  "firewallIPSubnetsAndCountAppliedRules" -> "getFirewallRulesFromConfig"
  "worker/src/config/config.ts" -> "getFirewallRulesPerSubnet"
  "validateIPAddress" -> "getFirewallRulesPerSubnet"
  "internalDnsLookup" -> "validateIPAddress"
  "validateHostname" -> "validateIPAddress"
  "worker/src/dns.ts" -> "validateIPAddress"
  "performOneTcpRequest" -> "validateIPAddress"
  "performUdpRequest" -> "validateIPAddress"
  "worker/src/dns.ts" -> "internalDnsLookup"
  "doOneAttempt" -> "internalDnsLookup"
  "doOneAttempt" -> "doOneAttempt"
  "dnsLookup" -> "doOneAttempt"
  "worker/src/dns.ts" -> "dnsLookup"
  "dnsLookupWithDefaultParameters" -> "dnsLookup"
  "resolveHost" -> "dnsLookup"
  "resolveIp" -> "dnsLookup"
  "worker/src/dns.ts" -> "dnsLookupWithDefaultParameters"
  "resolveAndValidateDnsServer" -> "dnsLookupWithDefaultParameters"
  "runHttpRequestUnsafe" -> "dnsLookupWithDefaultParameters"
  "lookup" -> "dnsLookupWithDefaultParameters"
  "netConnectOpts" -> "dnsLookupWithDefaultParameters"
  "makeBrowserRequestForBrowserTest" -> "dnsLookupWithDefaultParameters"
  "performUdpRequest" -> "dnsLookupWithDefaultParameters"
  "getDnsResolvers" -> "resolveAndValidateDnsServer"
  "worker/src/synthetics-dns/dns-request.ts" -> "resolveAndValidateDnsServer"
  "performDnsRequests" -> "getDnsResolvers"
  "worker/src/synthetics-dns/dns-request.ts" -> "getDnsResolvers"
  "runDNSRequestUnsafe" -> "performDnsRequests"
  "worker/src/synthetics-dns/dns-request.ts" -> "performDnsRequests"
  "runDNSRequest" -> "runDNSRequestUnsafe"
  "worker/src/synthetics-dns/dns-request.ts" -> "runDNSRequest"
  "runDNSTest" -> "runDNSRequest"
  "runMultiRequest" -> "runDNSRequest"
  "pingApi" -> "runDNSRequest"
  "worker/src/synthetics-dns/index.ts" -> "runDNSTest"
  "makeAPIRequest" -> "runDNSTest"
  "worker/src/synthetics-api/entrypoint.ts" -> "makeAPIRequest"
  "doTest" -> "makeAPIRequest"
  "performSingleHealthCheck" -> "makeAPIRequest"
  "worker/src/synthetics-tests/do-test.ts" -> "doTest"
  "newWorkerFromQueue" -> "doTest"
  "main" -> "newWorkerFromQueue"
  "worker/src/cli/start-worker.ts" -> "main"
  "Health" -> "performSingleHealthCheck"
  "Health" -> "Health"
  "worker/src/health/index.ts" -> "Health"
  "Worker" -> "Health"
  "Worker" -> "Worker"
  "spawnWorker" -> "Worker"
  "main" -> "Worker"
  "newWorkerFromQueue" -> "Worker"
  "worker/src/cli/start-worker.ts" -> "spawnWorker"
  "main" -> "spawnWorker"
  "worker/src/synthetics-multi/multi-request.ts" -> "runMultiRequest"
  "retryStep" -> "runMultiRequest"
  "doStep" -> "retryStep"
  "retryStep" -> "retryStep"
  "doSteps" -> "doStep"
  "doStep" -> "doStep"
  "runMultiTest" -> "doSteps"
  "doSteps" -> "doSteps"
  "runMultiTest" -> "runMultiTest"
  "makeAPIRequest" -> "runMultiTest"
  "pingApi" -> "pingApi"
  "ping" -> "pingApi"
  "ping" -> "ping"
  "worker/src/cli/ping.ts" -> "ping"
  "runHttpRequest" -> "runHttpRequestUnsafe"
  "worker/src/synthetics-http/http-request.ts" -> "runHttpRequest"
  "runHttpTest" -> "runHttpRequest"
  "runMultiRequest" -> "runHttpRequest"
  "TestRunner" -> "runHttpRequest"
  "pingApi" -> "runHttpRequest"
  "worker/src/synthetics-http/index.ts" -> "runHttpTest"
  "makeAPIRequest" -> "runHttpTest"
  "TestRunner" -> "TestRunner"
  "runTest" -> "TestRunner"
  "runTest" -> "runTest"
  "makeBrowserRequestForBrowserTest" -> "runTest"
  "pingBrowsers" -> "runTest"
  "worker/src/synthetics-browser/entrypoint.ts" -> "makeBrowserRequestForBrowserTest"
  "makeBrowserRequestForBrowserTest" -> "makeBrowserRequestForBrowserTest"
  "pingBrowsers" -> "pingBrowsers"
  "ping" -> "pingBrowsers"
  "runRequest" -> "lookup"
  "runSSLRequestUnsafe" -> "lookup"
  "worker/src/synthetics-ssl/ssl-request.ts" -> "runRequest"
  "runSSLRequest" -> "runRequest"
  "worker/src/synthetics-ssl/ssl-request.ts" -> "runSSLRequest"
  "runSSLTest" -> "runSSLRequest"
  "runMultiRequest" -> "runSSLRequest"
  "pingApi" -> "runSSLRequest"
  "worker/src/synthetics-ssl/index.ts" -> "runSSLTest"
  "makeAPIRequest" -> "runSSLTest"
  "runRequest" -> "runSSLRequestUnsafe"
  "performOneTcpRequest" -> "netConnectOpts"
  "performTcpRequests" -> "performOneTcpRequest"
  "worker/src/synthetics-tcp/tcp-request.ts" -> "performOneTcpRequest"
  "runTCPRequest" -> "performTcpRequests"
  "worker/src/synthetics-tcp/tcp-request.ts" -> "performTcpRequests"
  "worker/src/synthetics-tcp/tcp-request.ts" -> "runTCPRequest"
  "runTCPTest" -> "runTCPRequest"
  "runMultiRequest" -> "runTCPRequest"
  "pingApi" -> "runTCPRequest"
  "worker/src/synthetics-tcp/index.ts" -> "runTCPTest"
  "makeAPIRequest" -> "runTCPTest"
  "performWebsocketRequest" -> "lookup"
  "runWebsocketRequest" -> "performWebsocketRequest"
  "worker/src/synthetics-websocket/websocket-request.ts" -> "performWebsocketRequest"
  "worker/src/synthetics-websocket/websocket-request.ts" -> "runWebsocketRequest"
  "runWebsocketTest" -> "runWebsocketRequest"
  "runMultiRequest" -> "runWebsocketRequest"
  "worker/src/synthetics-websocket/index.ts" -> "runWebsocketTest"
  "makeAPIRequest" -> "runWebsocketTest"
  "runUDPRequest" -> "performUdpRequest"
  "worker/src/synthetics-udp/udp-request.ts" -> "performUdpRequest"
  "worker/src/synthetics-udp/udp-request.ts" -> "runUDPRequest"
  "runUDPTest" -> "runUDPRequest"
  "pingApi" -> "runUDPRequest"
  "worker/src/synthetics-udp/index.ts" -> "runUDPTest"
  "makeAPIRequest" -> "runUDPTest"
  "resolveHost" -> "resolveHost"
  "performIcmpRequests" -> "resolveHost"
  "performTcpRequestTracerouteIfNeeded" -> "resolveHost"
  "runICMPRequest" -> "performIcmpRequests"
  "worker/src/synthetics-icmp/icmp-request.ts" -> "performIcmpRequests"
  "worker/src/synthetics-icmp/icmp-request.ts" -> "runICMPRequest"
  "runICMPTest" -> "runICMPRequest"
  "pingApi" -> "runICMPRequest"
  "worker/src/synthetics-icmp/index.ts" -> "runICMPTest"
  "makeAPIRequest" -> "runICMPTest"
  "performTcpRequests" -> "performTcpRequestTracerouteIfNeeded"
  "worker/src/synthetics-tcp/tcp-request.ts" -> "performTcpRequestTracerouteIfNeeded"
  "resolveIp" -> "resolveIp"
  "handleStdout" -> "resolveIp"
  "worker/src/synthetics-tests/traceroute.ts" -> "handleStdout"
  "runTraceroute" -> "handleStdout"
  "worker/src/synthetics-tests/traceroute.ts" -> "runTraceroute"
  "performTcpRequestTracerouteIfNeeded" -> "runTraceroute"
  "performIcmpRequests" -> "performTcpRequestTracerouteIfNeeded"
  "worker/src/synthetics-icmp/icmp-request.ts" -> "performTcpRequestTracerouteIfNeeded"
  "internalDnsLookup" -> "validateHostname"
  "validateURL" -> "validateHostname"
  "worker/src/dns.ts" -> "validateHostname"
  "runDNSRequest" -> "validateHostname"
  "resolveAndValidateDnsServer" -> "validateHostname"
  "performIcmpRequests" -> "validateHostname"
  "runRequest" -> "validateHostname"
  "runTCPRequest" -> "validateHostname"
  "runUDPRequest" -> "validateHostname"
  "worker/src/dns.ts" -> "validateURL"
  "runHttpRequest" -> "validateURL"
  "runHttpRequestUnsafe" -> "validateURL"
  "runWebsocketRequest" -> "validateURL"
  "firewallIPSubnetsAndCountAppliedRules" -> "firewallIPSubnetsAndCountAppliedRules"
  "applyFirewall" -> "firewallIPSubnetsAndCountAppliedRules"
  "applyFirewall" -> "applyFirewall"
  "worker/src/cli/firewall.ts" -> "applyFirewall"
  "main" -> "applyFirewall"
  "worker/src/config/config.ts" -> "getDomainFilterRegexes"
  "validateDomainName" -> "getDomainFilterRegexes"
  "validateHostname" -> "validateDomainName"
  "worker/src/dns.ts" -> "validateDomainName"
  "worker/src/config/config.ts" -> "dumpConfigIfNeeded"
  "worker/src/config/index.ts" -> "dumpConfigIfNeeded"
  "main" -> "dumpConfigIfNeeded"
  "getFileTransports" -> "getFileTransport"
  "worker/src/logger.ts" -> "getFileTransport"
  "worker/src/logger.ts" -> "getFileTransports"
  "enableLoggerPrettyPrinting" -> "getFileTransports"
  "updateLoggerSettings" -> "enableLoggerPrettyPrinting"
  "worker/src/logger.ts" -> "enableLoggerPrettyPrinting"
  "worker/src/logger.ts" -> "updateLoggerSettings"
  "checkConfigValidity" -> "updateLoggerSettings"
  "checkConfigValidity" -> "checkConfigValidity"
  "main" -> "checkConfigValidity"
  "worker/src/logger.ts" -> "redactUrl"
  "runHttpRequest" -> "redactUrl"
  "onError" -> "redactUrl"
  "ForwardProxy" -> "redactUrl"
  "runWebsocketRequest" -> "redactUrl"
  "RequestStore" -> "redactUrl"
  "DevToolsProtocolDriver" -> "redactUrl"
  "SeleniumWebDriver" -> "redactUrl"
  "recursivelyFocusFrame" -> "redactUrl"
  "TestRunner" -> "redactUrl"
  "runHttpRequestUnsafe" -> "onError"
  "ForwardProxy" -> "ForwardProxy"
  "DevToolsProtocolDriver" -> "ForwardProxy"
  "SeleniumWebDriver" -> "ForwardProxy"
  "DevToolsProtocolDriver" -> "DevToolsProtocolDriver"
  "worker/src/synthetics-browser/tab-manager.ts" -> "DevToolsProtocolDriver"
  "SeleniumWebDriver" -> "SeleniumWebDriver"
  "worker/src/synthetics-browser/tab-manager.ts" -> "SeleniumWebDriver"
  "RequestStore" -> "RequestStore"
  "waitForFrameReady" -> "RequestStore"
  "BrowserProxy" -> "RequestStore"
  "waitForFrameReady" -> "waitForFrameReady"
  "BrowserProxy" -> "waitForFrameReady"
  "BrowserProxy" -> "BrowserProxy"
  "DevToolsProtocolDriver" -> "BrowserProxy"
  "SeleniumWebDriver" -> "recursivelyFocusFrame"
  "recursivelyFocusFrame" -> "recursivelyFocusFrame"
  "worker/src/config/index.ts" -> "getDatadogHost"
  "makeHttpRequestToDatadogWithRetry" -> "getDatadogHost"
  "worker/src/tracer.ts" -> "getDatadogHost"
  "getDatadogStorage" -> "getDatadogHost"
  "worker/src/lib/datadog-intake.ts" -> "makeHttpRequestToDatadogWithRetry"
  "DatadogQueue" -> "makeHttpRequestToDatadogWithRetry"
  "MultilocatorQueue" -> "makeHttpRequestToDatadogWithRetry"
  "worker/src/synthetics-browser/cloud-storage.ts" -> "makeHttpRequestToDatadogWithRetry"
  "sendProfile" -> "makeHttpRequestToDatadogWithRetry"
  "DatadogQueue" -> "DatadogQueue"
  "getQueue" -> "DatadogQueue"
  "worker/src/queue/index.ts" -> "DatadogQueue"
  "Worker" -> "DatadogQueue"
  "worker/src/queue/datadog-queue.ts" -> "getQueue"
  "worker/src/queue/index.ts" -> "getQueue"
  "getQueue" -> "getQueue"
  "worker/src/cli/start-worker.ts" -> "getQueue"
  "spawnWorker" -> "getQueue"
  "MultilocatorQueue" -> "MultilocatorQueue"
  "getQueue" -> "MultilocatorQueue"
  "worker/src/queue/index.ts" -> "MultilocatorQueue"
  "sendProfile" -> "sendProfile"
  "BrowserProxy" -> "sendProfile"
  "getStorageByDCType" -> "getDatadogStorage"
  "getDatadogStorage" -> "getDatadogStorage"
  "makeBrowserRequest" -> "getDatadogStorage"
  "getStorage" -> "getStorageByDCType"
  "worker/src/synthetics-browser/cloud-storage.ts" -> "getStorageByDCType"
  "getStorage" -> "getStorage"
  "makeBrowserRequest" -> "getStorage"
  "makeBrowserRequest" -> "makeBrowserRequest"
  "doTest" -> "makeBrowserRequest"
  "worker/src/config/index.ts" -> "getDatadogProfileIntakeHost"
  "sendProfile" -> "getDatadogProfileIntakeHost"
  "worker/src/config/index.ts" -> "getPublicKey"
  "ResultEmitter" -> "getPublicKey"
  "ResultEmitter" -> "ResultEmitter"
  "makeBrowserRequest" -> "ResultEmitter"
  "makeBrowserRequestForBrowserTest" -> "ResultEmitter"
  "makeAPIRequest" -> "ResultEmitter"
  "doTest" -> "ResultEmitter"
  "discardInvalidRequest" -> "ResultEmitter"
  "performSingleHealthCheck" -> "ResultEmitter"
  "worker/src/worker/types.ts" -> "ResultEmitter"
  "Worker" -> "ResultEmitter"
  "doTest" -> "discardInvalidRequest"
  "discardInvalidRequest" -> "discardInvalidRequest"
  "getStatsD" -> "shouldUseStatsD"
  "shouldUseStatsD" -> "shouldUseStatsD"
  "isStatsDReady" -> "shouldUseStatsD"
  "worker/src/dogstatsd.ts" -> "getStatsD"
  "isStatsDReady" -> "isStatsDReady"
  "Worker" -> "isStatsDReady"
  "internalDnsLookup" -> "getResolveFunction"
  "worker/src/signature/signature-datadog.ts" -> "getSigV1AuthHeaders"
  "makeHttpRequestToDatadogWithRetry" -> "getSigV1AuthHeaders"
  "worker/src/lib/datadog-intake.ts" -> "getApiKeyAuthHeaders"
  "makeHttpRequestToDatadogWithRetry" -> "getApiKeyAuthHeaders"
  "ASBQueue" -> "ASBQueue"
  "getQueue" -> "ASBQueue"
  "worker/src/queue/index.ts" -> "ASBQueue"
  "SQSQueue" -> "SQSQueue"
  "getQueue" -> "SQSQueue"
  "hasFeature" -> "hasFeature"
  "discardInvalidRequest" -> "hasFeature"
  "Worker" -> "hasFeature"
  "regexTest" -> "regexScript"
  "regexExtract" -> "regexScript"
  "regexScript" -> "regexScript"
  "regexTest" -> "regexTest"
  "applyOperation" -> "regexTest"
  "matchRegex" -> "regexTest"
  "computeAssertionResult" -> "applyOperation"
  "applyOperation" -> "applyOperation"
  "applyOperationOnMultipleValues" -> "applyOperation"
  "computeAssertionsResults" -> "computeAssertionResult"
  "computeAssertionResult" -> "computeAssertionResult"
  "computeAssertions" -> "computeAssertionResult"
  "computeAssertionsResults" -> "computeAssertionsResults"
  "doAssertions" -> "computeAssertionsResults"
  "computeAssertions" -> "computeAssertionsResults"
  "runTCPRequest" -> "computeAssertionsResults"
  "runWebsocketRequest" -> "computeAssertionsResults"
  "runUDPRequest" -> "computeAssertionsResults"
  "onEnd" -> "doAssertions"
  "runHttpRequestUnsafe" -> "doAssertions"
  "onData" -> "onEnd"
  "runHttpRequestUnsafe" -> "onEnd"
  "runHttpRequestUnsafe" -> "onData"
  "runICMPRequest" -> "computeAssertions"
  "worker/src/synthetics-icmp/icmp-request.ts" -> "computeAssertions"
  "runSSLRequest" -> "doAssertions"
  "worker/src/synthetics-ssl/ssl-request.ts" -> "doAssertions"
  "runDNSRequestUnsafe" -> "computeAssertions"
  "worker/src/synthetics-dns/dns-request.ts" -> "computeAssertions"
  "computeAssertionResult" -> "applyOperationOnMultipleValues"
  "applyOperationOnMultipleValues" -> "applyOperationOnMultipleValues"
  "worker/src/synthetics-browser/checks.ts" -> "matchRegex"
  "regexExtract" -> "regexExtract"
  "extractValue" -> "regexExtract"
  "extractValueFromHeader" -> "extractValue"
  "extractValueFromBody" -> "extractValue"
  "extractValue" -> "extractValue"
  "extractValues" -> "extractValueFromHeader"
  "extractValueFromHeader" -> "extractValueFromHeader"
  "worker/src/synthetics-tests/extract-values.ts" -> "extractValues"
  "extractValuesIfNeeded" -> "extractValues"
  "onEnd" -> "extractValuesIfNeeded"
  "runHttpRequestUnsafe" -> "extractValuesIfNeeded"
  "extractValues" -> "extractValueFromBody"
  "extractValueFromBody" -> "extractValueFromBody"
  "Tunnel" -> "Tunnel"
  "runHttpRequest" -> "Tunnel"
  "TestRunner" -> "Tunnel"
  "worker/src/synthetics-browser/test-runner/index.ts" -> "Tunnel"
  "worker/src/synthetics-browser/entrypoint.ts" -> "Tunnel"
  "makeBrowserRequestForBrowserTest" -> "Tunnel"
  "worker/src/synthetics-http/transform-body.ts" -> "transformBody"
  "onEnd" -> "transformBody"
  "NetworkErrorListener" -> "transformBody"
  "NetworkErrorListener" -> "NetworkErrorListener"
  "SeleniumWebDriver" -> "NetworkErrorListener"
  "MetricsReporter" -> "MetricsReporter"
  "TestResult" -> "MetricsReporter"
  "TestResult" -> "TestResult"
  "Driver" -> "TestResult"
  "VariableStore" -> "TestResult"
  "EmailStore" -> "TestResult"
  "DevToolsProtocolDriver" -> "TestResult"
  "SeleniumWebDriver" -> "TestResult"
  "TabManager" -> "TestResult"
  "TestRunner" -> "TestResult"
  "worker/src/synthetics-browser/test-runner/index.ts" -> "TestResult"
  "runTest" -> "TestResult"
  "Driver" -> "Driver"
  "worker/src/synthetics-browser/driver/base-driver-node.ts" -> "Driver"
  "TestResult" -> "Driver"
  "DevToolsProtocolDriver" -> "Driver"
  "SeleniumWebDriver" -> "Driver"
  "VariableStore" -> "VariableStore"
  "Driver" -> "VariableStore"
  "resolveBrowserTestRequestVariables" -> "VariableStore"
  "resolveAPIRequestVariables" -> "VariableStore"
  "runMultiRequest" -> "VariableStore"
  "runMultiTest" -> "VariableStore"
  "doSteps" -> "VariableStore"
  "doStep" -> "VariableStore"
  "retryStep" -> "VariableStore"
  "extractVariable" -> "VariableStore"
  "cleanAPIResult" -> "VariableStore"
  "cleanBrowserResult" -> "VariableStore"
  "cleanSingleAPIResult" -> "VariableStore"
  "useDisplayValueInResult" -> "VariableStore"
  "EmailStore" -> "VariableStore"
  "getEmailStore" -> "VariableStore"
  "TestRunner" -> "VariableStore"
  "worker/src/synthetics-browser/test-runner/index.ts" -> "VariableStore"
  "runTest" -> "VariableStore"
  "getVariableStoreFromTest" -> "VariableStore"
  "resolveBrowserTestRequestVariables" -> "resolveBrowserTestRequestVariables"
  "getTestFromRequest" -> "resolveBrowserTestRequestVariables"
  "getTestFromRequest" -> "getTestFromRequest"
  "makeBrowserRequestForBrowserTest" -> "getTestFromRequest"
  "worker/src/variable/resolution.ts" -> "resolveAPIRequestVariables"
  "runMultiRequest" -> "resolveAPIRequestVariables"
  "TestRunner" -> "resolveAPIRequestVariables"
  "makeAPIRequest" -> "resolveAPIRequestVariables"
  "doStep" -> "extractVariable"
  "extractVariable" -> "extractVariable"
  "worker/src/synthetics-tests/clean-result.ts" -> "cleanAPIResult"
  "makeAPIRequest" -> "cleanAPIResult"
  "cleanBrowserResult" -> "cleanBrowserResult"
  "makeBrowserRequestForBrowserTest" -> "cleanBrowserResult"
  "cleanAPIResult" -> "cleanSingleAPIResult"
  "cleanBrowserResult" -> "cleanSingleAPIResult"
  "worker/src/synthetics-tests/clean-result.ts" -> "cleanSingleAPIResult"
  "cleanBrowserResult" -> "useDisplayValueInResult"
  "cleanSingleAPIResult" -> "useDisplayValueInResult"
  "useDisplayValueInResult" -> "useDisplayValueInResult"
  "EmailStore" -> "EmailStore"
  "getEmailStore" -> "EmailStore"
  "TestRunner" -> "EmailStore"
  "worker/src/synthetics-browser/test-runner/index.ts" -> "EmailStore"
  "getEmailStore" -> "getEmailStore"
  "runTest" -> "getEmailStore"
  "getVariableStoreFromTest" -> "getVariableStoreFromTest"
  "getTestFromRequest" -> "getVariableStoreFromTest"
  "makeAPIRequest" -> "getVariableStoreFromTest"
  "TabManager" -> "TabManager"
  "TestRunner" -> "TabManager"
  "worker/src/synthetics-browser/test-runner/index.ts" -> "TabManager"
  "runTest" -> "TabManager"
  "runTest" -> "getBrowserSettings"
  "getBrowserSettings" -> "getBrowserSettings"
  "runTest" -> "validateTest"
  "validateTest" -> "validateTest"
  "doTest" -> "reportInvalidRouting"
  "reportInvalidRouting" -> "reportInvalidRouting"
  "Pusher" -> "Pusher"
  "Worker" -> "Pusher"
  "worker/src/cli/statsd-connect.ts" -> "tryStatsDConnection"
  "getBrowser" -> "builderByBrowser"
  "worker/src/synthetics-browser/driver/selenium/launcher.ts" -> "builderByBrowser"
  "getBrowser" -> "getBrowser"
  "SeleniumWebDriver" -> "getBrowser"
}
